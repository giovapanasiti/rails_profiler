<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h2 class="card-title mb-0">Response Time</h2>
    <div class="chart-legend d-flex align-items-center">
      <span class="legend-indicator" style="background-color: rgba(245, 158, 11, 0.8);"></span>
      <span class="legend-text">Avg Response Time (ms)</span>
    </div>
  </div>
  <div class="card-body">
    <div style="height: 200px;">
      <canvas id="responseTimeChart"></canvas>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  try {
    console.log("Rails Profiler: Initializing response time chart...");
    
    // Get response time data from controller
    const responseTimeData = <%= raw (@response_time_data || generate_sample_time_data(6, 'avg_duration')).to_json %>;
    console.log("Rails Profiler: Response time data", responseTimeData);
    
    // Format dates based on selected period
    const currentPeriod = '<%= params[:period] || "day" %>';
    
    // Helper to ensure timestamp is properly converted to JS Date
    const parseTimestamp = (timestamp) => {
      // If timestamp is a number and small enough to be in seconds (Ruby standard)
      // then convert to milliseconds (JavaScript standard)
      if (typeof timestamp === 'number' || !isNaN(Number(timestamp))) {
        const numericTimestamp = Number(timestamp);
        // If timestamp is likely in seconds (before year 2100)
        if (numericTimestamp < 4102444800) { // 2100-01-01 in seconds
          return new Date(numericTimestamp * 1000);
        }
        return new Date(numericTimestamp);
      }
      
      // Try parsing as ISO string
      return new Date(timestamp);
    };
    
    const formatTimestamp = (timestamp, period) => {
      // Parse the timestamp correctly
      const date = parseTimestamp(timestamp);
      
      // Format based on period
      switch(period) {
        case 'hour':
          return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        case 'week':
          // Return day name (Mon, Tue, etc.)
          return date.toLocaleDateString([], { weekday: 'short' });
        default: // 'day'
          // Just return hours for day view (less crowded)
          return date.toLocaleTimeString([], { hour: '2-digit' });
      }
    };
    
    // Create properly formatted labels and data
    // Sort data by timestamp to ensure correct order
    const sortedData = [...responseTimeData].sort((a, b) => 
      parseTimestamp(a.timestamp) - parseTimestamp(b.timestamp)
    );
    
    // Generate labels and data from sorted array
    const labels = sortedData.map(d => formatTimestamp(d.timestamp, currentPeriod));
    const durations = sortedData.map(d => parseFloat(d.avg_duration).toFixed(1));
    
    console.log("Rails Profiler: Response time labels", labels);
    console.log("Rails Profiler: Response time durations", durations);
    
    // Check if canvas element exists
    const canvas = document.getElementById('responseTimeChart');
    if (!canvas) {
      console.error("Rails Profiler: Response time chart canvas not found!");
      return;
    }
    
    // Create chart
    const ctx = canvas.getContext('2d');
    window.responseTimeChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Average Response Time (ms)',
          data: durations,
          backgroundColor: 'rgba(245, 158, 11, 0.1)',
          borderColor: 'rgba(245, 158, 11, 0.8)',
          borderWidth: 2,
          pointBackgroundColor: 'rgba(245, 158, 11, 1)',
          pointRadius: 3,
          pointHoverRadius: 5,
          tension: 0.3,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            grid: {
              display: false
            },
            title: {
              display: true,
              text: currentPeriod === 'hour' ? 'Time (minutes)' : 
                    currentPeriod === 'week' ? 'Day' : 'Time (hours)',
              color: '#666',
              font: {
                size: 12,
                weight: 'normal'
              },
              padding: { top: 10 }
            },
            ticks: {
              // Limit the number of ticks if there are many data points
              maxTicksLimit: currentPeriod === 'week' ? 7 : 12,
              autoSkip: true
            }
          },
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0, 0, 0, 0.05)'
            },
            title: {
              display: true,
              text: 'Response Time (ms)',
              color: '#666',
              font: {
                size: 12,
                weight: 'normal'
              },
              padding: { bottom: 10 }
            },
            ticks: {
              callback: function(value) {
                return value + ' ms';
              }
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(255, 255, 255, 0.9)',
            titleColor: '#1f2937',
            bodyColor: '#1f2937',
            borderColor: 'rgba(0, 0, 0, 0.1)',
            borderWidth: 1,
            padding: 10,
            cornerRadius: 6,
            displayColors: false,
            callbacks: {
              title: function(tooltipItems) {
                const originalDate = parseTimestamp(sortedData[tooltipItems[0].dataIndex].timestamp);
                // Show full date and time in tooltip
                return originalDate.toLocaleString();
              },
              label: function(context) {
                return `Response time: ${context.parsed.y} ms`;
              }
            }
          }
        }
      }
    });
    console.log("Rails Profiler: Response time chart created successfully");
  } catch (error) {
    console.error("Rails Profiler: Error creating response time chart", error);
    const container = document.getElementById('responseTimeChart').parentNode;
    container.innerHTML = '<div class="alert alert-danger">Error creating response time chart: ' + error.message + '</div>';
  }
});
</script>