<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h2 class="card-title mb-0">Request Volume</h2>
    <div class="chart-legend d-flex align-items-center">
      <span class="legend-indicator" style="background-color: rgba(60, 118, 242, 0.8);"></span>
      <span class="legend-text">Requests</span>
    </div>
  </div>
  <div class="card-body">
    <div style="height: 200px;">
      <canvas id="requestVolumeChart"></canvas>
    </div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  try {
    console.log("Rails Profiler: Initializing request volume chart...");
    
    // Get volume data from controller - never use sample data
    const volumeData = <%= raw (@volume_data || []).to_json %>;
    console.log("Rails Profiler: Volume data", volumeData);
    
    // If no volume data is available, display "No Data Available" message
    if (!volumeData || volumeData.length === 0) {
      const canvas = document.getElementById('requestVolumeChart');
      if (canvas) {
        const ctx = canvas.getContext('2d');
        const container = canvas.parentNode;
        container.innerHTML = '<div class="d-flex align-items-center justify-content-center h-100 text-muted"><em>No data available</em></div>';
      }
      return;
    }
    
    // Format dates based on selected period
    const currentPeriod = '<%= params[:period] || "day" %>';
    
    // Helper to ensure timestamp is properly converted to JS Date
    const parseTimestamp = (timestamp) => {
      // If timestamp is a number and small enough to be in seconds (Ruby standard)
      // then convert to milliseconds (JavaScript standard)
      if (typeof timestamp === 'number' || !isNaN(Number(timestamp))) {
        const numericTimestamp = Number(timestamp);
        // If timestamp is likely in seconds (before year 2100)
        if (numericTimestamp < 4102444800) { // 2100-01-01 in seconds
          return new Date(numericTimestamp * 1000);
        }
        return new Date(numericTimestamp);
      }
      
      // Try parsing as ISO string
      return new Date(timestamp);
    };
    
    const formatTimestamp = (timestamp, period) => {
      // Parse the timestamp correctly
      const date = parseTimestamp(timestamp);
      
      // Format based on period
      switch(period) {
        case 'hour':
          return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        case 'week':
          // Return day name (Mon, Tue, etc.)
          return date.toLocaleDateString([], { weekday: 'short' });
        default: // 'day'
          // Just return hours for day view (less crowded)
          return date.toLocaleTimeString([], { hour: '2-digit' });
      }
    };
    
    // Get the interval duration based on the period
    const getIntervalDuration = (period) => {
      switch(period) {
        case 'hour': return 5 * 60 * 1000; // 5 minutes in ms
        case 'week': return 24 * 60 * 60 * 1000; // 1 day in ms
        default: return 60 * 60 * 1000; // 1 hour in ms for 'day' period
      }
    };
    
    // Generate a complete series of timestamps with the appropriate interval
    const generateCompleteTimeSeries = (data, period) => {
      if (!data || data.length === 0) return [];
      
      // Sort data by timestamp to find min and max times
      const sortedByTime = [...data].sort((a, b) => 
        parseTimestamp(a.timestamp) - parseTimestamp(b.timestamp)
      );
      
      const firstTimestamp = parseTimestamp(sortedByTime[0].timestamp);
      const lastTimestamp = parseTimestamp(sortedByTime[sortedByTime.length - 1].timestamp);
      
      const intervalMs = getIntervalDuration(period);
      const result = [];
      const existingTimestamps = new Map();
      
      // Create a map of existing data points by their timestamp
      sortedByTime.forEach(d => {
        const ts = parseTimestamp(d.timestamp).getTime();
        existingTimestamps.set(ts, d);
      });
      
      // Generate all timestamps in the range
      let currentTime = new Date(firstTimestamp);
      while (currentTime <= lastTimestamp) {
        const timeMs = currentTime.getTime();
        
        // If we have data for this timestamp, use it; otherwise create a zero entry
        if (existingTimestamps.has(timeMs)) {
          result.push(existingTimestamps.get(timeMs));
        } else {
          result.push({
            timestamp: timeMs,
            count: 0,
            avg_duration: 0
          });
        }
        
        // Move to next interval
        currentTime = new Date(currentTime.getTime() + intervalMs);
      }
      
      return result;
    };
    
    // Create the complete time series with all intervals
    const completeVolumeData = generateCompleteTimeSeries(volumeData, currentPeriod);
    console.log("Rails Profiler: Complete volume data with all intervals", completeVolumeData);
    
    // Generate labels and data from the complete series
    const labels = completeVolumeData.map(d => formatTimestamp(d.timestamp, currentPeriod));
    const counts = completeVolumeData.map(d => d.count);
    
    console.log("Rails Profiler: Request volume labels", labels);
    console.log("Rails Profiler: Request counts", counts);
    
    // Check if canvas element exists
    const canvas = document.getElementById('requestVolumeChart');
    if (!canvas) {
      console.error("Rails Profiler: Request volume chart canvas not found!");
      return;
    }
    
    // Create chart
    const ctx = canvas.getContext('2d');
    window.requestVolumeChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: 'Request Count',
          data: counts,
          backgroundColor: 'rgba(60, 118, 242, 0.7)',
          borderColor: 'rgba(60, 118, 242, 1)',
          borderWidth: 1,
          borderRadius: 4,
          barPercentage: 0.8,
          maxBarThickness: currentPeriod === 'week' ? 30 : 15
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            grid: {
              display: false
            },
            title: {
              display: true,
              text: currentPeriod === 'hour' ? 'Time (minutes)' : 
                    currentPeriod === 'week' ? 'Day' : 'Time (hours)',
              color: '#666',
              font: {
                size: 12,
                weight: 'normal'
              },
              padding: { top: 10 }
            },
            ticks: {
              // Limit the number of ticks if there are many data points
              maxTicksLimit: currentPeriod === 'week' ? 7 : 12,
              autoSkip: true
            }
          },
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0, 0, 0, 0.05)'
            },
            title: {
              display: true,
              text: 'Number of Requests',
              color: '#666',
              font: {
                size: 12,
                weight: 'normal'
              },
              padding: { bottom: 10 }
            },
            ticks: {
              precision: 0
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(255, 255, 255, 0.9)',
            titleColor: '#1f2937',
            bodyColor: '#1f2937',
            borderColor: 'rgba(0, 0, 0, 0.1)',
            borderWidth: 1,
            padding: 10,
            cornerRadius: 6,
            displayColors: false,
            callbacks: {
              title: function(tooltipItems) {
                const originalDate = parseTimestamp(completeVolumeData[tooltipItems[0].dataIndex].timestamp);
                // Show full date and time in tooltip
                return originalDate.toLocaleString();
              },
              label: function(context) {
                return `${context.parsed.y} requests`;
              }
            }
          }
        }
      }
    });
    console.log("Rails Profiler: Request volume chart created successfully");
  } catch (error) {
    console.error("Rails Profiler: Error creating request volume chart", error);
    const container = document.getElementById('requestVolumeChart').parentNode;
    container.innerHTML = '<div class="alert alert-danger">Error creating request volume chart: ' + error.message + '</div>';
  }
});
</script>