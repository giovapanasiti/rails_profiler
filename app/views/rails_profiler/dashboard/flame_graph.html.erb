<div class="page-header">
  <h1 class="page-title">Flame Graph</h1>
  <div class="page-actions">
    
  </div>
</div>

<% if @flame_data.blank? %>
  <div class="alert alert-info">
    <i class="fas fa-info-circle mr-2"></i>
    No code profiling data is available. Make sure you have enabled code profiling with <code>config.track_code = true</code>.
  </div>
<% else %>
  <div class="card mb-4">
    <div class="card-header">
      <div class="card-title">
        Flame Graph for <%= @profile[:controller] %>#<%= @profile[:action] %>
      </div>
      <div class="card-description">
        <span class="text-muted">
          Request ID: <%= @profile[:request_id] %>, Duration: <%= @profile[:duration].round(2) %> ms
        </span>
      </div>
    </div>
    <div class="card-body">
      <div class="flame-graph-container" id="flame-graph"></div>
      <div class="flame-graph-controls mt-2">
        <button class="btn btn-sm btn-outline-primary" id="resetFlameGraph">Reset Zoom</button>
        <button class="btn btn-sm btn-outline-secondary" id="searchFlameGraph">Search</button>
      </div>
      <div class="legend mt-2">
        <span class="badge method-type-controller mr-2">Controller</span>
        <span class="badge method-type-model mr-2">Model</span>
        <span class="badge method-type-view mr-2">View</span>
        <span class="badge method-type-ruby mr-2">Ruby</span>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="card-header">
      <div class="card-title">Method Execution Times</div>
      <div class="card-actions">
        <div class="search-container">
          <input type="text" id="method-search" class="form-control form-control-sm" placeholder="Search methods...">
        </div>
      </div>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-hover table-striped method-table">
          <thead>
            <tr>
              <th>Method</th>
              <th>Type</th>
              <th>Calls</th>
              <th>Total Time (ms)</th>
              <th>Avg Time (ms)</th>
              <th>% of Request</th>
            </tr>
          </thead>
          <tbody>
            <% @flame_data.each do |method_data| %>
              <tr class="method-row" data-method-name="<%= method_data[:name] %>">
                <td class="method-name" title="<%= method_data[:name] %>">
                  <%= method_data[:name].truncate(50) %>
                </td>
                <td>
                  <span class="method-type-label method-type-<%= method_data[:method_type] %>">
                    <%= method_data[:method_type] %>
                  </span>
                </td>
                <td><%= method_data[:count] %></td>
                <td><%= method_data[:value].round(2) %> ms</td>
                <td><%= (method_data[:value] / method_data[:count]).round(2) %> ms</td>
                <td>
                  <div class="progress">
                    <div class="progress-bar bg-<%= method_data[:method_type] == 'controller' ? 'warning' : (method_data[:method_type] == 'model' ? 'info' : (method_data[:method_type] == 'view' ? 'danger' : 'primary')) %>"
                         style="width: <%= [(method_data[:value] / @profile[:duration] * 100), 100].min %>%">
                      <%= ((method_data[:value] / @profile[:duration]) * 100).round(1) %>%
                    </div>
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
<% end %>

<% content_for :scripts do %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Profile dropdown functionality
    const dropdownToggle = document.querySelector('.dropdown-toggle');
    const dropdownMenu = document.querySelector('.dropdown-menu');
    
    if (dropdownToggle && dropdownMenu) {
      dropdownToggle.addEventListener('click', function(e) {
        e.preventDefault();
        dropdownMenu.classList.toggle('show');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!e.target.matches('.dropdown-toggle') && !e.target.closest('.dropdown-toggle')) {
          dropdownMenu.classList.remove('show');
        }
      });
    }
    
    // Method search functionality
    const methodSearch = document.getElementById('method-search');
    if (methodSearch) {
      methodSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const methodRows = document.querySelectorAll('tr.method-row');
        
        methodRows.forEach(function(row) {
          const methodName = row.getAttribute('data-method-name').toLowerCase();
          if (methodName.includes(searchTerm)) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }
    
    // Flame graph visualization
    const flameGraphContainer = document.getElementById('flame-graph');
    if (flameGraphContainer && <%= @flame_data.present? ? 'true' : 'false' %>) {
      console.log("Initializing flame graph visualization");
      
      // Create a direct, simple bar chart as a fallback solution
      const flameData = <%= raw @flame_data.to_json %>;
      console.log("Flame data loaded:", flameData);
      
      if (!flameData || flameData.length === 0) {
        console.error("No flame data available to visualize");
        flameGraphContainer.innerHTML = '<div class="alert alert-warning">No method data available to visualize for this profile.</div>';
        return;
      }
      
      try {
        // Just create a very simple bar chart with D3 to visualize the method times
        // Sort methods by execution time (descending)
        const sortedMethods = flameData.sort((a, b) => b.value - a.value).slice(0, 50); // Show top 50 methods
        
        // Set dimensions
        const margin = {top: 20, right: 30, bottom: 120, left: 60};
        const width = flameGraphContainer.offsetWidth - margin.left - margin.right;
        const height = 350 - margin.top - margin.bottom;
        
        // Create SVG element
        const svg = d3.select('#flame-graph')
          .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
          .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);
        
        // Set scales
        const x = d3.scaleBand()
          .domain(sortedMethods.map(d => d.name))
          .range([0, width])
          .padding(0.1);
          
        const y = d3.scaleLinear()
          .domain([0, d3.max(sortedMethods, d => d.value)])
          .nice()
          .range([height, 0]);
        
        // Color function based on method type
        const getColor = (method) => {
          const methodType = method.method_type || 'ruby';
          switch(methodType) {
            case 'controller': return '#f59e0b'; // amber
            case 'model': return '#0ea5e9';      // sky blue
            case 'view': return '#ec4899';       // pink
            default: return '#8b5cf6';           // purple (ruby)
          }
        };
        
        // Create bars
        svg.selectAll('.bar')
          .data(sortedMethods)
          .enter()
          .append('rect')
            .attr('class', 'bar')
            .attr('x', d => x(d.name))
            .attr('y', d => y(d.value))
            .attr('width', x.bandwidth())
            .attr('height', d => height - y(d.value))
            .attr('fill', d => getColor(d))
            .on('mouseover', function(event, d) {
              // Create tooltip
              const div = d3.select('body')
                .append('div')
                .attr('class', 'tooltip')
                .style('position', 'absolute')
                .style('background-color', 'rgba(0,0,0,0.8)')
                .style('color', 'white')
                .style('padding', '8px')
                .style('border-radius', '4px')
                .style('pointer-events', 'none')
                .style('opacity', 0);
              
              // Populate tooltip
              div.html(`
                <div><strong>${d.name}</strong></div>
                <div>Total Time: ${d.value.toFixed(2)} ms</div>
                <div>Calls: ${d.count || 1}</div>
                <div>Type: ${d.method_type || 'ruby'}</div>
              `)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 28) + 'px')
              .style('opacity', 1);
            })
            .on('mouseout', function() {
              d3.selectAll('.tooltip').remove();
            });
        
        // Add X axis
        svg.append('g')
          .attr('transform', `translate(0,${height})`)
          .call(d3.axisBottom(x))
          .selectAll('text')
            .attr('transform', 'translate(-10,0)rotate(-45)')
            .style('text-anchor', 'end')
            .style('font-size', '9px');
        
        // Add Y axis
        svg.append('g')
          .call(d3.axisLeft(y).ticks(5).tickFormat(d => d + ' ms'));
        
        // Add chart title
        svg.append('text')
          .attr('x', width / 2)
          .attr('y', 0 - (margin.top / 2))
          .attr('text-anchor', 'middle')
          .style('font-size', '16px')
          .style('fill', '#333')
          .text('Top Methods by Execution Time');
          
        console.log("Simple bar chart rendered successfully");
      } catch (error) {
        console.error("Error rendering chart:", error);
        flameGraphContainer.innerHTML = `
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle mr-2"></i>
            Error rendering visualization: ${error.message}. Check browser console for details.
          </div>`;
      }
    } else if (flameGraphContainer) {
      console.error("Flame graph container exists but no flame data available");
      flameGraphContainer.innerHTML = '<div class="alert alert-warning">No flame data available for visualization.</div>';
    }
  });
</script>
<% end %>